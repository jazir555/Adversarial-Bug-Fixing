[
    {
        "id": "schedule-trigger",
        "type": "inject",
        "z": "flow",
        "name": "Schedule Trigger",
        "props": [],
        "repeat": "1800",
        "crontab": "",
        "once": true,
        "topic": "",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "config-loader"
            ]
        ]
    },
    {
        "id": "config-loader",
        "type": "change",
        "z": "flow",
        "name": "Load Configuration",
        "rules": [
            {
                "t": "set",
                "p": "github_repo",
                "to": "$.env.GITHUB_REPO",
                "toType": "env"
            },
            {
                "t": "set",
                "p": "github_token",
                "to": "$.env.GITHUB_TOKEN",
                "toType": "env"
            },
            {
                "t": "set",
                "p": "code_file",
                "to": "src/main.py"
            },
            {
                "t": "set",
                "p": "max_iterations",
                "to": "10"
            },
            {
                "t": "set",
                "p": "min_change_percent",
                "to": "2.5"
            },
            {
                "t": "set",
                "p": "language",
                "to": "python"
            },
            {
                "t": "set",
                "p": "parallel_ranges",
                "to": "3"
            },
            {
                "t": "set",
                "p": "retry_attempts",
                "to": "3"
            },
            {
                "t": "set",
                "p": "error_alert_email",
                "to": "$.env.ALERT_EMAIL",
                "toType": "env"
            },
            {
                "t": "set",
                "p": "openai_api_key",
                "to": "$.env.OPENAI_API_KEY",
                "toType": "env"
            },
            {
                "t": "set",
                "p": "slack_channel",
                "to": "$.env.SLACK_CHANNEL",
                "toType": "env"
            },
            {
                "t": "set",
                "p": "slack_token",
                "to": "$.env.SLACK_TOKEN",
                "toType": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 100,
        "wires": [
            [
                "code-analyzer"
            ]
        ]
    },
    {
        "id": "code-analyzer",
        "type": "function",
        "z": "flow",
        "name": "Code Analyzer",
        "func": "const fs = require('fs');\nconst detect = require('language-detect');\n\ntry {\n    // Load the code file\n    const code = fs.readFileSync(msg.code_file, 'utf8');\n    // Detect the programming language\n    msg.language = detect(msg.code_file) || msg.language;\n    msg.originalCode = code;\n    // Detect code blocks (Placeholder function)\n    msg.ranges = detectCodeBlocks(code, msg.language);\n} catch (err) {\n    msg.error = 'Failed to load or analyze code: ' + err.message;\n    return [null, msg];\n}\n\nfunction detectCodeBlocks(code, lang) {\n    // Implement actual logic to detect code blocks based on language\n    // For demonstration, returning dummy ranges\n    return [\n        { start: 0, end: 50 },\n        { start: 51, end: 100 },\n        { start: 101, end: 150 }\n    ];\n}\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "x": 550,
        "y": 100,
        "wires": [
            [
                "parallel-processor"
            ],
            [
                "error-handler"
            ]
        ]
    },
    {
        "id": "parallel-processor",
        "type": "split",
        "z": "flow",
        "name": "Parallel Processor",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "stream": false,
        "addname": "",
        "x": 750,
        "y": 100,
        "wires": [
            [
                "smart-range-adjuster"
            ]
        ]
    },
    {
        "id": "smart-range-adjuster",
        "type": "function",
        "z": "flow",
        "name": "Smart Range Adjuster",
        "func": "const LANG_CONFIG = {\n    python: { start: /(def |class |async def )/, end: /(return|raise |except |finally:)/ },\n    javascript: { start: /(function |class |const )/, end: /(return|throw |catch|})/ }\n};\n\nconst adjustRange = (code, range, lang) => {\n    const config = LANG_CONFIG[lang.toLowerCase()] || LANG_CONFIG.python;\n    const lines = code.split('\\n');\n    let { start, end } = range;\n\n    while (start > 0 && !config.start.test(lines[start - 1])) start--;\n    while (end < lines.length && !config.end.test(lines[end])) end++;\n\n    return {\n        adjustedRange: { start, end },\n        codeChunk: lines.slice(start, end + 1).join('\\n'),\n        context: lines.slice(Math.max(0, start - 5), Math.min(end + 5, lines.length)).join('\\n')\n    };\n};\n\ntry {\n    const adjusted = adjustRange(msg.originalCode, msg.payload, msg.language);\n    return { payload: { ...msg, ...adjusted } };\n} catch (err) {\n    msg.error = 'Range adjustment failed: ' + err.message;\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "x": 950,
        "y": 100,
        "wires": [
            [
                "prompt-engine"
            ],
            [
                "error-handler"
            ]
        ]
    },
    {
        "id": "prompt-engine",
        "type": "function",
        "z": "flow",
        "name": "Prompt Engine",
        "func": "const prompts = [\n    'Identify all logic flaws.',\n    'Optimize performance bottlenecks.',\n    'Enhance security best practices.',\n    'Refactor redundant code.',\n    'Check compliance with coding standards.'\n];\n\nconst randomPrompt = prompts[Math.floor(Math.random() * prompts.length)];\nmsg.prompt = `${randomPrompt}\\n${msg.language} code:\\n${msg.codeChunk}\\n\\nContext:\\n${msg.context}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1150,
        "y": 100,
        "wires": [
            [
                "ai-gateway"
            ]
        ]
    },
    {
        "id": "ai-gateway",
        "type": "http request",
        "z": "flow",
        "name": "AI API Request",
        "method": "POST",
        "ret": "obj",
        "url": "https://api.openai.com/v1/chat/completions",
        "tls": "",
        "x": 1350,
        "y": 100,
        "wires": [
            [
                "code-validator"
            ],
            [
                "error-handler"
            ]
        ],
        "headers": {
            "Content-Type": "application/json",
            "Authorization": "Bearer {{openai_api_key}}"
        },
        "body": "{\"model\":\"gpt-4\",\"messages\":[{\"role\":\"system\",\"content\":\"You are a senior code reviewer.\"},{\"role\":\"user\",\"content\":\"{{prompt}}\"}]}"
    },
    {
        "id": "code-validator",
        "type": "function",
        "z": "flow",
        "name": "Code Validator",
        "func": "const { execSync } = require('child_process');\n\ntry {\n    // Assume corrected code is stored in temp_corrected_code.py\n    execSync('python3 -m py_compile temp_corrected_code.py');\n    return msg;\n} catch (e) {\n    msg.error = 'Code validation failed: ' + e.message;\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "x": 1550,
        "y": 100,
        "wires": [
            [
                "change-analyzer"
            ],
            [
                "error-handler"
            ]
        ]
    },
    {
        "id": "change-analyzer",
        "type": "function",
        "z": "flow",
        "name": "Change Analyzer",
        "func": "const diff = require('diff');\n\ntry {\n    const changes = diff.diffLines(msg.previousCode, msg.currentCode);\n    msg.changeSummary = changes.map(c => c.added ? `+ ${c.value}` : c.removed ? `- ${c.value}` : `  ${c.value}`).join('\\n');\n    msg.changeImpact = ((changes.filter(c => c.added || c.removed).length / msg.previousCode.split('\\n').length) * 100).toFixed(2);\n    msg.shouldContinue = parseFloat(msg.changeImpact) > parseFloat(msg.min_change_percent);\n    return msg;\n} catch (err) {\n    msg.error = 'Change analysis failed: ' + err.message;\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "x": 1750,
        "y": 100,
        "wires": [
            [
                "iteration-controller"
            ],
            [
                "error-handler"
            ]
        ]
    },
    {
        "id": "iteration-controller",
        "type": "switch",
        "z": "flow",
        "name": "Iteration Controller",
        "property": "shouldContinue",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "true",
                "vt": "bool"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1950,
        "y": 100,
        "wires": [
            [
                "prompt-engine"
            ],
            [
                "github-versioner"
            ]
        ]
    },
    {
        "id": "github-versioner",
        "type": "github",
        "z": "flow",
        "name": "Push to GitHub",
        "repo": "{{github_repo}}",
        "token": "{{github_token}}",
        "operation": "commit",
        "commitMessage": "Automated Code Update",
        "filePath": "src/main.py",
        "fileContent": "{{currentCode}}",
        "branch": "main",
        "x": 2150,
        "y": 100,
        "wires": [
            [
                "slack-notifier"
            ],
            [
                "error-handler"
            ]
        ]
    },
    {
        "id": "slack-notifier",
        "type": "slack",
        "z": "flow",
        "name": "Slack Notification",
        "token": "{{slack_token}}",
        "channel": "{{slack_channel}}",
        "message": "✅ *Code Update Successful*\nChanges:\n{{changeSummary}}",
        "x": 2350,
        "y": 100,
        "wires": []
    },
    {
        "id": "error-handler",
        "type": "function",
        "z": "flow",
        "name": "Error Handler",
        "func": "msg.to = msg.error_alert_email;\nmsg.subject = `🚨 AI Validation Failed: Lines ${msg.range.start}-${msg.range.end}`;\nmsg.body = `Error Details:\n${msg.error}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1350,
        "y": 300,
        "wires": [
            [
                "email-notifier"
            ]
        ]
    },
    {
        "id": "email-notifier",
        "type": "e-mail",
        "z": "flow",
        "server": "{{smtp_server}}",
        "port": "{{smtp_port}}",
        "secure": false,
        "name": "",
        "dname": "Send Alert",
        "x": 1550,
        "y": 300,
        "wires": []
    }
]
