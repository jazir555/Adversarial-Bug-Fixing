#!/bin/bash

# Ensure required tools are installed
if ! command -v node &> /dev/null || ! command -v npm &> /dev/null; then
    echo "Node.js and npm are required. Please install them first."
    exit 1
fi

# Create project directory structure
mkdir -p node-red-automation/flows
cd node-red-automation

# Create package.json with required dependencies
cat > package.json <<'EOF'
{
  "name": "node-red-automation",
  "dependencies": {
    "node-red": "^3.1.0",
    "node-red-node-email": "^1.0.1",
    "node-red-node-slack": "^1.1.0",
    "node-red-contrib-github": "^1.0.2",
    "language-detect": "^1.1.0",
    "diff": "^5.1.0"
  },
  "scripts": {
    "start": "node-red --userDir ./flows --flows flow.json"
  }
}
EOF

# Create flow configuration
cat > flows/flow.json <<'EOF'
[
    {
        "id": "schedule-trigger",
        "type": "inject",
        "name": "Schedule Trigger",
        "props": [],
        "repeat": "1800",
        "crontab": "",
        "wires": [["config-loader"]]
    },
    {
        "id": "config-loader",
        "type": "change",
        "name": "Load Configuration",
        "rules": [
            { "t": "set", "p": "github_repo", "to": "your-org/your-repo" },
            { "t": "set", "p": "code_file", "to": "src/main.py" },
            { "t": "set", "p": "max_iterations", "to": "10" },
            { "t": "set", "p": "min_change_percent", "to": "2.5" },
            { "t": "set", "p": "language", "to": "python" },
            { "t": "set", "p": "parallel_ranges", "to": "3" },
            { "t": "set", "p": "retry_attempts", "to": "3" },
            { "t": "set", "p": "error_alert_email", "to": "alerts@company.com" }
        ],
        "wires": [["code-analyzer"]]
    },
    {
        "id": "code-analyzer",
        "type": "function",
        "name": "Code Analyzer",
        "func": "const fs = require('fs');\nconst detect = require('language-detect');\nlet code = fs.readFileSync(msg.code_file, 'utf8');\nmsg.language = detect(msg.code_file) || msg.language;\nmsg.originalCode = code;\nmsg.ranges = detectCodeBlocks(code, msg.language);\nfunction detectCodeBlocks(code, lang) { let blocks = []; return blocks; }\nreturn msg;",
        "wires": [["parallel-processor"]]
    },
    {
        "id": "parallel-processor",
        "type": "split",
        "name": "Parallel Processor",
        "split": "parallel_ranges",
        "wires": [["smart-range-adjuster"]]
    },
    {
        "id": "smart-range-adjuster",
        "type": "function",
        "name": "Smart Range Adjuster",
        "func": "const LANG_CONFIG = {\n  python: { start: /(def |class |async def )/, end: /(return|raise |except |finally:)/ },\n  javascript: { start: /(function |class |const )/, end: /(return|throw |catch|})/ }\n};\nconst adjustRange = (code, range, lang) => {\n  const config = LANG_CONFIG[lang] || LANG_CONFIG.python;\n  const lines = code.split('\\n');\n  let [start, end] = [range.start, range.end];\n  while (start > 0 && !config.start.test(lines[start - 1])) start--;\n  while (end < lines.length && !config.end.test(lines[end])) end++;\n  return { adjustedRange: { start, end }, codeChunk: lines.slice(start, end + 1).join('\\n'), context: lines.slice(Math.max(0, start - 5), end + 5).join('\\n') };\n};\nmsg = { ...msg, ...adjustRange(msg.originalCode, msg.range, msg.language) };\nreturn msg;",
        "wires": [["prompt-engine"]]
    },
    {
        "id": "prompt-engine",
        "type": "function",
        "name": "Prompt Engine",
        "func": "const prompts = [\n  'Identify all logic flaws.',\n  'Optimize performance bottlenecks.',\n  'Enhance security best practices.',\n  'Refactor redundant code.',\n  'Check compliance with coding standards.'\n];\nmsg.prompt = `${prompts[Math.floor(Math.random() * prompts.length)]}\\n${msg.language} code:\\n${msg.codeChunk}\\n\\nContext:\\n${msg.context}`;\nreturn msg;",
        "wires": [["ai-gateway"]]
    },
    {
        "id": "ai-gateway",
        "type": "http request",
        "name": "AI API Request",
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "payload": {
            "model": "gpt-4",
            "messages": [
                { "role": "system", "content": "You are a senior code reviewer." },
                { "role": "user", "content": "{{prompt}}" }
            ]
        },
        "wires": [["code-validator"]]
    },
    {
        "id": "code-validator",
        "type": "function",
        "name": "Code Validator",
        "func": "const { execSync } = require('child_process');\ntry { execSync('python3 -m py_compile temp_corrected_code.py'); return msg; } catch (e) {\n  msg.error = e.message;\n  return [null, msg];\n}",
        "wires": [["change-analyzer"], ["error-handler"]]
    },
    {
        "id": "change-analyzer",
        "type": "function",
        "name": "Change Analyzer",
        "func": "const diff = require('diff');\nconst changes = diff.diffLines(msg.previousCode, msg.currentCode);\nmsg.changeSummary = changes.map(c => c.added ? `+ ${c.value}` : c.removed ? `- ${c.value}` : `  ${c.value}`).join('\\n');\nmsg.changeImpact = ((changes.filter(c => c.added || c.removed).length / msg.previousCode.split('\\n').length) * 100).toFixed(2);\nmsg.shouldContinue = msg.changeImpact > msg.min_change_percent;\nreturn msg;",
        "wires": [["iteration-controller"]]
    },
    {
        "id": "iteration-controller",
        "type": "switch",
        "name": "Iteration Controller",
        "rules": [{ "t": "eq", "v": "true", "vt": "bool" }],
        "wires": [["prompt-engine"], ["github-versioner"]]
    },
    {
        "id": "github-versioner",
        "type": "github",
        "name": "Push to GitHub",
        "repo": "your-org/your-repo",
        "operation": "commit",
        "payload": { "message": "Updated Code", "content": "{{changeSummary}}" },
        "wires": [["slack-notifier"]]
    },
    {
        "id": "slack-notifier",
        "type": "slack",
        "name": "Slack Notification",
        "channel": "C123456",
        "text": "Updated Code:\n{{changeSummary}}",
        "wires": []
    },
    {
        "id": "error-handler",
        "type": "function",
        "name": "Error Handler",
        "func": "msg.to = msg.error_alert_email;\nmsg.subject = `ðŸš¨ AI Validation Failed: ${msg.range.start}-${msg.range.end}`;\nmsg.body = `Error: ${msg.error}`;\nreturn msg;",
        "wires": [["email-notifier"]]
    },
    {
        "id": "email-notifier",
        "type": "email",
        "name": "Send Alert",
        "wires": []
    }
]
EOF

# Install dependencies
npm install

# Start Node-RED
echo "Starting Node-RED... Access the editor at http://localhost:1880"
npm start
